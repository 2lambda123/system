;prepaidsubscribers.generator.type="Generator_Payments"
prepaidsubscribers.export=APPLICATION_PATH "/files/"
prepaidsubscribers.generator.separator=","
prepaidsubscribers.generator.collection=subscribers

prepaidsubscribers.generator.match.0.type='"balance"'

; ### prepere the matched cdrs to $group aggregation ##
;prepaidsubscribers.generator.pre_project.current_date='$currentDate'
;prepaidsubscribers.generator.pre_project.trans_id_1='{"$cond": { "if" : "$reverse_charge" , "then":null ,"else":"$transaction_id"}}'
;prepaidsubscribers.generator.pre_project.refund_flag='{"$cond": { "if" : "$reverse_charge" , "then":"Y" ,"else":"N"}}'
;prepaidsubscribers.generator.pre_project.refund_trans_id_1='{"$cond": { "if" : "$reverse_charge" , "then":"$transaction_id" ,"else":null}}'
;prepaidsubscribers.generator.pre_project.np_code='{"$cond" : {  "if" : { "$isArray" : [ "$np_code" ] }  , "then" : "" , "else" : "$np_code"}}'


; ### If needed actions todo before the unwind/aggregation ###
prepaidsubscribers.generator.pre_pipeline='[{
												"$lookup":{"from":"balances",
															"localField":"sid",
															"foreignField":"sid",
															"as":"balances"}
											}]'


; ### This  is the keys  that  the _id  will be grouped by  exmp : _id :  {SubscriberId:"$sid", connected_number:"$connected_number"} ###
prepaidsubscribers.generator.grouping.sid='"$sid"'
prepaidsubscribers.generator.grouping.aid='"$aid"'
;prepaidsubscribers.generator.grouping.usageDivision='{ "$floor" : {"$divide" : [ {"$sum" : "$mscc_data.0.used_units" } , 1073741824 ] } }'

; ### This will each record will be mapped to the  aggregated line ###
prepaidsubscribers.generator.mapping.ban='{"$first":"$aid"}'
prepaidsubscribers.generator.mapping.subscriber_no='{"$first":"$sid"}'
prepaidsubscribers.generator.mapping.creation_date='{"$first":"$from"}'


; ### Add helper fields to the  aggregated line ### 
prepaidsubscribers.generator.helpers.stamps='{"$push":"$stamp"}'

;### Actions to do after the  aggregate ###
;prepaidsubscribers.generator.post_pipeline="[]"

;  ### Define translation to the fields  by RegExes or  by functions ###
;prepaidsubscribers.generator.translations.sp_id.type=function
;prepaidsubscribers.generator.translations.sp_id.translation.function="cdrQueryTranslations"
;prepaidsubscribers.generator.translations.sp_id.translation.values.1.0.service_provider_id="/^(?!0)/"
prepaidsubscribers.generator.translations.creation_date.type=function
prepaidsubscribers.generator.translations.creation_date.translation.function="translateUrt"
prepaidsubscribers.generator.translations.creation_date.translation.values="j-m-y"
prepaidsubscribers.generator.translations.acct_expire_date.type=function
prepaidsubscribers.generator.translations.acct_expire_date.translation.function="translateUrt"
prepaidsubscribers.generator.translations.acct_expire_date.translation.values="j-m-y"
;prepaidsubscribers.generator.translations.recharge_date_time.type=function
;prepaidsubscribers.generator.translations.recharge_date_time.translation.function="translateUrt"
;prepaidsubscribers.generator.translations.recharge_date_time.translation.values="H:i:s j-m-y"
;prepaidsubscribers.generator.translations.cdr_call_type.type=function
;prepaidsubscribers.generator.translations.cdr_call_type.translation.function="translateUrt"
;prepaidsubscribers.generator.translations.cdr_call_type.translation.values="H:i:s"

; ###  specify how  each field should  be writen to the file (based on sprintf formating) ###
prepaidsubscribers.generator.field_definitions.ban="%s"
prepaidsubscribers.generator.field_definitions.creation_date="%s"
prepaidsubscribers.generator.field_definitions.subscriber_no="%s"
prepaidsubscribers.generator.field_definitions.creation_time="%s"
prepaidsubscribers.generator.field_definitions.no_of_balances="%s"
prepaidsubscribers.generator.field_definitions.balance1_id="%s"
prepaidsubscribers.generator.field_definitions.balance1="%s"
prepaidsubscribers.generator.field_definitions.acct_expire_date="%s"
prepaidsubscribers.generator.field_definitions.balance2_id="%s"
prepaidsubscribers.generator.field_definitions.balance2="%s"
prepaidsubscribers.generator.field_definitions.balance2_expire="%s"
prepaidsubscribers.generator.field_definitions.balance3_id="%s"
prepaidsubscribers.generator.field_definitions.balance3="%s"
prepaidsubscribers.generator.field_definitions.balance3_expire="%s"
prepaidsubscribers.generator.field_definitions.balance4_id="%s"
prepaidsubscribers.generator.field_definitions.balance4="%s"
prepaidsubscribers.generator.field_definitions.balance4_expire="%s"
prepaidsubscribers.generator.field_definitions.balance5_id="%s"
prepaidsubscribers.generator.field_definitions.balance5="%s"
prepaidsubscribers.generator.field_definitions.balance5_expire="%s"
prepaidsubscribers.generator.field_definitions.balance6_id="%s"
prepaidsubscribers.generator.field_definitions.balance6="%s"
prepaidsubscribers.generator.field_definitions.balance6_expire="%s"
prepaidsubscribers.generator.field_definitions.balance7_id="%s"
prepaidsubscribers.generator.field_definitions.balance7="%s"
prepaidsubscribers.generator.field_definitions.balance7_expire="%s"
prepaidsubscribers.generator.field_definitions.balance8_id="%s"
prepaidsubscribers.generator.field_definitions.balance8="%s"
prepaidsubscribers.generator.field_definitions.balance8_expire="%s"
prepaidsubscribers.generator.field_definitions.balance9_id="%s"
prepaidsubscribers.generator.field_definitions.balance9="%s"
prepaidsubscribers.generator.field_definitions.balance9_expire="%s"
prepaidsubscribers.generator.field_definitions.balance10_id="%s"
prepaidsubscribers.generator.field_definitions.balance10="%s"
prepaidsubscribers.generator.field_definitions.balance10_expire="%s"
prepaidsubscribers.generator.field_definitions.sp_id="%s"
prepaidsubscribers.generator.field_definitions.cos_id="%s"
prepaidsubscribers.generator.field_definitions.imsi="%s"
prepaidsubscribers.generator.field_definitions.last_trans_date="%s"
prepaidsubscribers.generator.field_definitions.lang_id="%s"
prepaidsubscribers.generator.field_definitions.last_recharge_date="%s"