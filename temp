diff --git a/conf/dev.ini b/conf/dev.ini
index f4b976530..6708d821a 100644
--- a/conf/dev.ini
+++ b/conf/dev.ini
@@ -204,7 +204,7 @@ cache.0="Core"
 namespaces[]=Action
 ;namespaces[]=Subscriber
 ; plugins
-plugins[]=calcCpuPlugin
+;plugins[]=calcCpuPlugin
 ;plugins[]=prepaidPlugin
 ;plugins[]=ggsnPlugin
 ;plugins[]=pelephonePlugin
diff --git a/library/Billrun/Calculator/Customer.php b/library/Billrun/Calculator/Customer.php
index c69fd78b8..cd6dc4039 100644
--- a/library/Billrun/Calculator/Customer.php
+++ b/library/Billrun/Calculator/Customer.php
@@ -38,12 +38,24 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 	 * @var array
 	 */
 	protected $subscribers;
+        
+        /**
+	 * array of Billrun_Accounts
+	 * @var array
+	 */
+	protected $accounts;
 
 	/**
 	 * Whether or not to use the subscriber bulk API method
 	 * @var boolean
 	 */
 	protected $bulk = false;
+        
+        /**
+	 * Whether or not to use the accounts bulk API method
+	 * @var boolean
+	 */
+	protected $accountBulk = false;
 
 	/**
 	 * Extra customer fields to be saved by line type
@@ -69,7 +81,10 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 			$this->translateCustomerIdentToAPI = $this->getCustomerIdentificationTranslation();
 		}
 		if (isset($options['calculator']['bulk'])) {
-			$this->bulk = $options['calculator']['bulk'];
+			$this->bulk = true;
+		}
+                if (isset($options['calculator']['bulk'])) {
+			$this->accountBulk = $options['calculator']['account_bulk'];
 		}
 		if (isset($options['calculator']['extra_data'])) {
 			$this->extraData = $options['calculator']['extra_data'];
@@ -147,9 +162,13 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 				return $row;
 			}
 		}
-		
-		$row = $this->enrichWithSubscriberInformation($row,$subscriber);
-
+		if ($this->accountBulk) {
+			$this->accountsByStamp();
+			$account = isset($this->accounts[$row['stamp']]) ? $this->accounts[$row['stamp']] : FALSE;
+                        $row = $this->enrichWithSubscriberInformation($row,$subscriber, $account);
+		}else{
+                        $row = $this->enrichWithSubscriberInformation($row,$subscriber);
+                }
 //		foreach (array_keys($subscriber->getAvailableFields()) as $key) {
 //			if (is_numeric($subscriber->{$key})) {
 //				$subscriber->{$key} = intval($subscriber->{$key}); // remove this conversion when the CRM output contains integers
@@ -272,12 +291,45 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 		if ($this->bulk) { // load all the subscribers in one call
 			$this->subscribers = $this->loadSubscribers($lines);
 		}
+                if ($this->accountBulk){
+                    $this->accounts = $this->loadAccounts($lines);
+                }
 		return $lines;
 	}
 
 	public function isBulk() {
 		return $this->bulk;
 	}
+        
+        public function loadAccounts($rows) {
+		$this->subscribers_by_stamp = false;
+		$subscriber_extra_data = array_keys($this->subscriber->getCustomerExtraData());
+		
+		// build customer mapping priorities
+		$priorities = $this->buildPriorities($rows, $subscriber_extra_data);
+		$subsData = [];
+		$queriesToMatchSubs = [];
+		foreach ($priorities as $priorityQueries) {
+			if (empty($priorityQueries)) {
+				continue;
+			}
+			$queriesToMatchSubs[] = $priorityQueries;
+		}
+			// load one subscriber for each query
+			$results = $this->subscriber->loadSubscriberForQueries($queriesToMatchSubs, $this->subscriber->getAvailableFields());
+			if (!$results) {
+				Billrun_Factory::log('Failed to load subscribers data for params: ' . print_r($priorityQueries, 1), Zend_Log::NOTICE);
+				return false;
+			}
+
+
+		return array_map(function($data) {
+			$type = array('type' => Billrun_Factory::config()->getConfigValue('subscribers.subscriber.type', 'db'));
+			$options = array('data' => $data->getRawData());
+			$subscriber = Billrun_Subscriber::getInstance(array_merge($data->getRawData(), $options, $type));
+			return $subscriber;
+		}, $results);
+	}
 
 	public function loadSubscribers($rows) {
 		$this->subscribers_by_stamp = false;
@@ -478,7 +530,7 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 		return $customerIdentificationTranslation;
 	}
 
-	protected function enrichWithSubscriberInformation($row, $subscriber = null) {
+	protected function enrichWithSubscriberInformation($row, $subscriber = null, $account = null ) {
 		$enrichedData = array();
 		$rowData = $row instanceof Mongodloid_Entity  ? $row->getRawData() : $row;
 		if (!is_null($subscriber)) {
@@ -488,7 +540,8 @@ class Billrun_Calculator_Customer extends Billrun_Calculator {
 			}
 		}
 		$foreignEntitiesToAutoload = Billrun_Factory::config()->getConfigValue(static::$type.'.calculator.foreign_entities_autoload', array('account', 'account_subscribers'));
-		$foreignData =  $this->getForeignFields(array('subscriber' => $subscriber ), $enrichedData, $foreignEntitiesToAutoload, $rowData);
+                $foreignEntities = $this->accountBulk ? array('subscriber' => $subscriber, 'account' => $account) : array('subscriber' => $subscriber);
+		$foreignData =  $this->getForeignFields($foreignEntities, $enrichedData, $foreignEntitiesToAutoload, $rowData);
 		if((!is_null($subscriber) || !empty($enrichedData)) ||
 				is_null($subscriber) || !empty($foreignData)) {
 			if($row instanceof Mongodloid_Entity) {
