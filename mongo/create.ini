use police;
db.createCollection('log');
db.createCollection('lines');
db.createCollection('events');
db.createCollection('rates');
db.createCollection('carriers');
db.createCollection('queue');
db.createCollection('users');
db.createCollection('plans');
db.createCollection('rebalance_queue');
db.createCollection('config', {capped: true, size:104857600});
db.createCollection('ipmapping');



//Lines collection
// Add indecies to insure that theres no duplicate lines.
db.lines.ensureIndex({'stamp': 1 }, { unique: true });
db.lines.ensureIndex({'urt': 1 }, { unique: false , sparse: false, background: true });
//db.lines.ensureIndex({'file': 1 }, { unique: false, sparse: false, background: true}); //each file has short urt period so it's preferred to search by urt and file while hint on urt
db.lines.ensureIndex({'sid': 1 }, { unique: false, sparse: true, background: true });

;//db.lines.ensureIndex({'aid': 1 }, { unique: false, sparse: true, background: true }); // removed caused it's cover by aid+urt index
;//db.lines.ensureIndex({'type': 1 }, { unique: false , sparse: true, background: true });
;//db.lines.ensureIndex({'source': 1 }, { unique: false , sparse: true, background: true });
;//db.lines.ensureIndex({'sid': 1, 'urt' : 1}, { unique: false , sparse: true, background: true }); // index necessary for admin panel(?)
;//db.lines.ensureIndex({'sid': 1, 'billrun' : 1, 'type' : 1}, { unique: false , sparse: true, background: true }); // index necessary for xml generator
;//db.lines.ensureIndex({'aid': 1, 'urt' : 1}, { unique: false , sparse: true, background: true }); // index necessary for admin panel(?)
;//db.lines.ensureIndex({'aid': 1, 'urt' : 1, 'billrun' : 1}, { unique: false , sparse: true, background: true }); // added to check if billrun creation is faster
db.lines.ensureIndex({'urt': 1, 'usaget' : 1, 'type' : 1}, { unique: false , sparse: true, background: true });
db.lines.ensureIndex({'urt' : 1,'served_pdp_address': 1}, { unique: false , sparse: true, background: true });
db.lines.ensureIndex({'urt' : 1,'imsi': 1}, { unique: false , sparse: true, background: true });
db.lines.ensureIndex({'urt': 1, 'usaget' : 1, 'called_number' : 1}, { unique: false , sparse: true, background: true });
db.lines.ensureIndex({'urt': 1, 'usaget' : 1, 'calling_number' : 1}, { unique: false , sparse: true, background: true });

//Log collection
// Add indecies to insure that theres no duplicate lines.
db.log.ensureIndex({'stamp': 1 },  { unique: true , sparse: true});
db.log.ensureIndex({'type': 1 }, { unique: false , sparse: true, background: true });
db.log.ensureIndex({'source': 1 }, { unique: false , sparse: false, background: true });
db.log.ensureIndex({'start_process_time': 1 }, { unique: false , sparse: false, background: true });
db.log.ensureIndex({'process_time': 1 }, { unique: false , sparse: false, background: true });
db.log.ensureIndex({'received_time': 1 }, { unique: false , sparse: false, background: true });
db.log.ensureIndex({'file_name': 1 }, { unique: false , sparse: false, background: true });

//Rates Collection
db.rates.ensureIndex({'from': 1, 'to': 1 , 'key':1}, { unique: true, sparse: true, background: true });
db.rates.ensureIndex({'from': 1, 'to': 1 , 'params.serving_networks':1}, { sparse: true, background: true });
db.rates.ensureIndex({'from': 1 }, { unique: false , sparse: true, background: true });
db.rates.ensureIndex({'to': 1 }, { unique: false , sparse: true, background: true });
db.rates.ensureIndex({'key': 1 }, { unique: false , sparse: true, background: true });

//Balances Collection
//db.balances.ensureIndex( { sid: 1, billrun_month: 1 },{ unique: true , background: true });
//Carriers Collection
db.carriers.ensureIndex({'key': 1}, { unique: true , sparse: true, background: true });
db.carriers.ensureIndex({'identifiction.group_name': 1}, { unique: false , sparse: true, background: true });
db.carriers.ensureIndex({'identifiction.sms_centre': 1}, { unique: false , sparse: true, background: true });

//Queue Collection
db.queue.ensureIndex({'stamp': 1 }, { unique: true });
db.queue.ensureIndex({'calc_name': 1 }, { unique: false , sparse: true, background: true});
db.queue.ensureIndex({'calc_time': 1 }, { unique: false , sparse: true, background: true});
db.queue.ensureIndex({'type': 1 }, { unique: false , sparse: true, background: true});
db.queue.ensureIndex({'aid': 1 }, { unique: false , sparse: true, background: true});
db.queue.ensureIndex({'hash': 1, 'calc_time': 1, 'type': 1}, {'background': true})
;db.queue.ensureIndex({'urt': 1 }, { unique: false , sparse: false, background: true });
db.queue.ensureIndex({'urt': 1 , 'type': 1}, { unique: false , sparse: true, background: true });

// rebalance_queue collection
db.rebalance_queue.ensureIndex({'sid': 1}, {unique: true, 'background': true})

//Users collection (including auth)
//Basic fields: username, password (php password_hash), roles (array of values: read, write or admin)
db.users.ensureIndex({'username': 1}, { unique: true , sparse: true, background: true });

//IP mapping collection
// Add indecies to insure that theres no duplicate lines.
db.ipmapping.ensureIndex({'stamp': 1 },  { unique: true });
db.ipmapping.ensureIndex({'urt': 1 }, { unique: false ,  background:true, expireAfterSeconds: 16070400 }); //Keep ipmapping cdrs for around 6 months
db.ipmapping.ensureIndex({'urt': 1 , internal_ip : 1, start_port:1, end_port:1},  { unique: false , background:true});
db.ipmapping.ensureIndex({'urt': 1 , external_ip : 1, start_port:1, end_port:1},  { unique: false , background:true});

