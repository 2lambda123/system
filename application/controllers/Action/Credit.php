<?php

/**
 * @package         Billing
 * @copyright       Copyright (C) 2012-2016 BillRun Technologies Ltd. All rights reserved.
 * @license         GNU Affero General Public License Version 3; see LICENSE.txt
 */
require_once APPLICATION_PATH . '/application/controllers/Action/Api.php';

/**
 * Credit action class
 *
 * @package  Action
 * @since    0.5
 */
class CreditAction extends ApiAction {
	use Billrun_Traits_Api_UserPermissions;
	
	protected $request = null;
	protected $event = null;
	
	/**
	 * method to execute the refund
	 * it's called automatically by the api main controller
	 */
	public function execute() {
		$this->allowed();
		
		Billrun_Factory::log("Execute credit", Zend_Log::INFO);
		$this->request = $this->getRequest()->getRequest(); // supports GET / POST requests;
		$this->setEventData();
		$this->process();
		return $this->response();
	}
	
	protected function setEventData() {
		$this->event = $this->parseRow($this->request);
		$this->event['source'] = 'credit';
		$this->event['rand'] = rand(1, 1000000);
		$this->event['stamp'] = Billrun_Util::generateArrayStamp($this->event);
		$this->event['record_type'] = $this->getDataRecordType($this->usaget, $this->event);
	}
	
	/**
	 * Runs Billrun process
	 * 
	 * @return type Data generated by process
	 */
	protected function process() {
		Billrun_Factory::log("Process of credit starting", Zend_Log::INFO);
		$options['parser'] = 'none';
		$processor = Billrun_Processor::getInstance($options);
		$processor->addDataRow($this->event);
		$processor->process();
		Billrun_Factory::log("Process of credit ended", Zend_Log::INFO);
//		$data = $processor->getData()['data'];
//		return current($processor->getAllLines());
	}
	
	protected function parseRow($credit_row) {
		$ret = Billrun_Util::parseCreditRow($credit_row);
		if (!$ret || (isset($ret['status']) && $ret['status'] == 0)) {
			$error_message = isset($ret['desc']) ? $ret['desc'] : 'Error with credit row';
			return $this->setError($error_message, $credit_row);
		}
		return $ret;
	}
	
	protected function validateMandatoryFields() {
		$mandatoryFields = array();
		$missingFields = array();
		
		foreach ($mandatoryFields as $mandatoryField) {
			
		}
	}
	
	protected function proccess() {
		
	}
	
	protected function response() {
		$this->getController()->setOutput(array(
			array(
				'status' => 1,
				'desc' => 'success',
				'stamp' => $this->event['stamp'],
				'input' => $this->request,
			)
		));
		Billrun_Factory::log("done credit line " . $this->event['stamp'], Zend_Log::INFO);
		return true;
	}

	protected function getPermissionLevel() {
		return Billrun_Traits_Api_IUserPermissions::PERMISSION_WRITE;
	}

}
